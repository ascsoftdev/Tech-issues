ClassLoader.getSystemClassLoader().getResource(“file.txt”);  I were using above Statement to load File and read the content. In local IntelliJ , code was working fine means file loaded and content also present. When I am build it and run it over docker container or in linux environment file getting null as a content.

After that I have done lot’s of R&D on this and found that below things:  In a web server environment like Tomcat or Java EE, multiple class loaders are used to load classes and resources for different parts of the application. Each web application deployed on the server typically has its own class loader.
When you use ClassLoader.getSystemClassLoader().getResource(), it actually fetches resources using the system class loader. The system class loader is responsible for loading classes and resources available on the classpath when the JVM starts.
However, in a web server environment, relying on ClassLoader.getSystemClassLoader() might not always give you the resource you expect. That's because the system class loader might not have visibility into the classpath of the web application specifically.
To load resources within a web application context, it's generally better to use the context class loader. For example, in a servlet or web application context, you might use:  Thread.currentThread().getContextClassLoader().getResource("yourResourcePath");  This retrieves the resource using the class loader associated with the current thread's context, which in a web application context, often points to the class loader responsible for loading resources within that specific web application.  ClassLoader.getSystemClassLoader() fetches resources using the system class loader, which might not have visibility into the specific classpath of a web application.
Thread.currentThread().getContextClassLoader() is more suitable in a web server environment as it fetches resources using the context class loader, which is typically associated with the web application's class loader and has visibility into the web application's classpath.
Using the appropriate class loader context ensures that resources are fetched from the correct classpath, especially in multi-application environments like web servers.

Other than that we can use   getClass().getClassLoader().getResource(“abc.txt”);
